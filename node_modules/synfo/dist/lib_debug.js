(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./infos"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getInfo = exports.getInfoMeta = void 0;
    const infos_1 = require("./infos");
    const { exec } = require("child_process");
    ;
    /**
     * Retrieve data of one {@link Info} in `infos.json`
     *
     * @param name Name of the info
     */
    function getInfoMeta(name) {
        // let info: Info = INFOS.find(i => i.name === name);
        let info = infos_1.INFOS.find(function (v) { return v.name === name; });
        if (!info) {
            throw new Error("No such info");
        }
        return info;
    }
    exports.getInfoMeta = getInfoMeta;
    /**
     * Execute an info command
     *
     * @param name Name of the info
     * @returns Command output
     */
    function getInfo(name) {
        let info = getInfoMeta(name);
        var output;
        exec(info.command, (error, stdout, stderr) => {
            if (error) {
                output = `synfo ERR while executing info command: \n${error.message}`;
                console.log('err');
            }
            if (stderr) {
                output = `synfo STDERR while executing info command: \n${stderr}`;
                console.log('stderr');
            } else {
                output = stdout;
            if (!output) {
                output = 'eergbuqerbgfiugbh';
            }
            console.log(stdout);
            console.log('suc');}
        });
        if (!output) {
            output = 'hh';
        }
        return output;
    }
    exports.getInfo = getInfo;
});
