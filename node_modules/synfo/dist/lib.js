/**
 * Synfo Helper Functions
 *
 * (c) Romein van Buren 2021
 * @license MIT
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./infos"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.listInfos = exports.getInfo = exports.getInfoMeta = void 0;
    const infos_1 = require("./infos");
    const { execSync } = require("child_process");
    ;
    /**
     * Retrieve data of one {@link Info} in `infos.json`
     *
     * @param name Name of the info
     */
    function getInfoMeta(name) {
        // let info: Info = INFOS.find(i => i.name === name);
        let info = infos_1.INFOS.find(function (v) { return v.name === name; });
        if (!info) {
            throw new Error("No such info");
        }
        return info;
    }
    exports.getInfoMeta = getInfoMeta;
    /**
     * Get system metadata from an {@link Info} instance
     *
     * The info is retrieved by executing an {@link Info.command}.
     *
     * @param name Name of the info, used to look it up in the {@link INFOS} array
     * @returns Command output
     */
    function getInfo(name) {
        let info = getInfoMeta(name);
        let msg;
        msg = execSync(info.command).toString();
        return msg;
        // return;
    }
    exports.getInfo = getInfo;
    /**
     * Create an human or machine readable array of available infos
     *
     * @param prettyPrint Whether to pretty-print (make it human redable) the list
     * @returns Array (if `prettyPrint` is truthy) or string (if `prettyPrint` is
     *          falsy) containing the list
     */
    function listInfos(prettyPrint = false) {
        let output;
        infos_1.INFOS.sort((a, b) => (a.name > b.name) ? 1 : ((b.name > a.name) ? -1 : 0)).forEach(i => {
            if (prettyPrint) {
                output += `- ${i["name"]}\n`;
            }
            else {
                output.push(i["name"]);
            }
        });
        return output;
    }
    exports.listInfos = listInfos;
});
