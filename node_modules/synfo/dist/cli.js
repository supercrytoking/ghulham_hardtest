/**
 * Synfo Command Line Interface
 *
 * (c) Romein van Buren 2021
 * @license MIT
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./lib"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CLI = void 0;
    const lib_1 = require("./lib");
    const pkgJson = require('../package.json');
    /**
     * Command Line Interface
     *
     * This is the class used by the executable located in `bin/synfo`. The useful
     * function here is {@link program}, which actually runs the CLI.
     */
    class CLI {
        /**
         * Class constructor
         *
         * @param command Command to be executed.
         */
        constructor(command) {
            this.command = command;
        }
        /**
         * Get help text
         *
         * @private
         */
        getHelpText() {
            return `SYNFO v${pkgJson.version}
A CLI tool to view many types of system metadata.

Usage:
  synfo <info_name>
  synfo help

Where info_name is the name of info you'd like to have returned. Must be one of:
${lib_1.listInfos(true)}`;
        }
        /**
         * Run the CLI program
         */
        program() {
            /**
             * Check if user specified command
             */
            if (!this.command) {
                process.stdout.write(this.getHelpText());
                return;
            }
            /**
             * If command is `help`, show help text
             */
            else if (this.command === 'help') {
                process.stdout.write(this.getHelpText());
                return;
            }
            /**
             * If not, user wants info about the system
             */
            else {
                process.stdout.write(lib_1.getInfo(this.command));
                return;
            }
        }
    }
    exports.CLI = CLI;
});
